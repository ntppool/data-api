// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package ntpdb

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type ServersIpVersion string

const (
	ServersIpVersionV4 ServersIpVersion = "v4"
	ServersIpVersionV6 ServersIpVersion = "v6"
)

func (e *ServersIpVersion) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServersIpVersion(s)
	case string:
		*e = ServersIpVersion(s)
	default:
		return fmt.Errorf("unsupported scan type for ServersIpVersion: %T", src)
	}
	return nil
}

type NullServersIpVersion struct {
	ServersIpVersion ServersIpVersion `json:"servers_ip_version"`
	Valid            bool             `json:"valid"` // Valid is true if ServersIpVersion is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullServersIpVersion) Scan(value interface{}) error {
	if value == nil {
		ns.ServersIpVersion, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ServersIpVersion.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullServersIpVersion) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ServersIpVersion), nil
}

type ZoneServerCountsIpVersion string

const (
	ZoneServerCountsIpVersionV4 ZoneServerCountsIpVersion = "v4"
	ZoneServerCountsIpVersionV6 ZoneServerCountsIpVersion = "v6"
)

func (e *ZoneServerCountsIpVersion) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ZoneServerCountsIpVersion(s)
	case string:
		*e = ZoneServerCountsIpVersion(s)
	default:
		return fmt.Errorf("unsupported scan type for ZoneServerCountsIpVersion: %T", src)
	}
	return nil
}

type NullZoneServerCountsIpVersion struct {
	ZoneServerCountsIpVersion ZoneServerCountsIpVersion `json:"zone_server_counts_ip_version"`
	Valid                     bool                      `json:"valid"` // Valid is true if ZoneServerCountsIpVersion is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullZoneServerCountsIpVersion) Scan(value interface{}) error {
	if value == nil {
		ns.ZoneServerCountsIpVersion, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ZoneServerCountsIpVersion.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullZoneServerCountsIpVersion) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ZoneServerCountsIpVersion), nil
}

type Server struct {
	ID           uint32           `db:"id" json:"id"`
	Ip           string           `db:"ip" json:"ip"`
	IpVersion    ServersIpVersion `db:"ip_version" json:"ip_version"`
	UserID       uint32           `db:"user_id" json:"user_id"`
	AccountID    sql.NullInt32    `db:"account_id" json:"account_id"`
	Hostname     sql.NullString   `db:"hostname" json:"hostname"`
	Stratum      sql.NullInt32    `db:"stratum" json:"stratum"`
	InPool       uint32           `db:"in_pool" json:"in_pool"`
	InServerList uint32           `db:"in_server_list" json:"in_server_list"`
	Netspeed     uint32           `db:"netspeed" json:"netspeed"`
	CreatedOn    time.Time        `db:"created_on" json:"created_on"`
	UpdatedOn    time.Time        `db:"updated_on" json:"updated_on"`
	ScoreTs      sql.NullTime     `db:"score_ts" json:"score_ts"`
	ScoreRaw     float64          `db:"score_raw" json:"score_raw"`
	DeletionOn   sql.NullTime     `db:"deletion_on" json:"deletion_on"`
}
